const fs = require('fs')

// 探索svg动画中的，animation-duration 和 storke-dashoffset 与 笔画路径长度的关系。
path00 = [
    { length: 321.08990478515625, animationDuration: 0.7195638020833334, dashoffset: 577 },
    { length: 330.7146301269531, animationDuration: 0.7277018229166666, dashoffset: 587 },
    { length: 403.7048645019531, animationDuration: 0.787109375, dashoffset: 660 },
    { length: 465.853515625, animationDuration: 0.8375651041666666, dashoffset: 722 },
    { length: 914.2689819335938, animationDuration: 1.2021484375, dashoffset: 1170 },
    { length: 257.5745544433594, animationDuration: 0.6682942708333334, dashoffset: 514 }
]

const double = x => x*x;
const distance = (x1, y1, x2, y2) => Math.sqrt(double(x1-x2) + double(y1-y2))

// 传入路径数组，输出路径长度。路径数组表示简单的多个线段，不涉及到复杂到曲线。
function getPathsLength(paths) {
   const ans = []
   for (const p of paths) {
       let len = 0
       for (let i = 1; i < p.length; i++) {
           len += distance(p[i][0], p[i][1], p[i-1][0], p[i-1][1])
       }
       // 加上一个数，防止溢出。
       ans.push(len + 0.1)
   }
   return ans
}
// 根据笔画的长度来计算对应动画到持续时间。
// 基础时间 + 系数 * sqrt（笔画长度）
function getAnimationDuration(pathLen) {
    return Math.sqrt(pathLen) * 0.04 + 0.3
}

// 手动构建svg
function generationSVG({medians, strokes}) {
    const svgCode = []
    svgCode.push(`<svg version="1.1" viewBox="0 0 1024 1024" xmlns="http://www.w3.org/2000/svg">`)
    // 背景田字格
    svgCode.push(`<g stroke="lightgray" stroke-dasharray="1,1" stroke-width="1" transform="scale(4, 4)">
      <line x1="0" y1="0" x2="256" y2="256"></line>
      <line x1="256" y1="0" x2="0" y2="256"></line>
      <line x1="128" y1="0" x2="128" y2="256"></line>
      <line x1="0" y1="128" x2="256" y2="128"></line>
    </g>`)

    // animation 的定义
    svgCode.push(`<g transform="scale(1, -1) translate(0, -900)">
      <style type="text/css">`)
    const pathLens = getPathsLength(medians)
    let animationDelay = 0
    for(let i = 0; i < strokes.length; i++) {
        const animationDuration = getAnimationDuration(pathLens[i])
        svgCode.push(`
        @keyframes keyframes${i} {
            from { stroke-dashoffset: ${pathLens[i]}; }
            to { stroke-dashoffset: 0; }
          }
          #animation-${i} {
            animation: keyframes${i} ${animationDuration}s both;
            animation-delay: ${animationDelay}s;
            animation-timing-function: linear;
          }`)
        animationDelay += animationDuration
    }
    svgCode.push(`</style>`)

    // 底色
    for (let i = 0; i < strokes.length; i++) {
        svgCode.push(`<path d="${strokes[i]}" fill="lightgray"></path>`)
    }

    // 动画路径与animation的使用
    for (let i = 0; i < strokes.length; i++) {
        let medianPath = []
        medianPath.push(`M ${medians[i][0][0]} ${medians[i][0][1]} `)
        for (let j = 1; j < medians[i].length; j++){
            medianPath.push(`L ${medians[i][j][0]} ${medians[i][j][1]} `)
        }
        medianPath = medianPath.join('')
        svgCode.push(`
        <clipPath id="clip-${i}">
            <path d="${strokes[i]}"></path>
        </clipPath>
        <path clip-path="url(#clip-${i})" d="${medianPath}" fill="none" id="animation-${i}" stroke-dasharray="${pathLens[i]}" stroke-linecap="round" stroke-width='128' stroke='black'></path>
        `)
    }
    svgCode.push(`\t</g>\n</svg>`)
    return svgCode.join('\n')
}
const metaData = {"character":"亹","strokes":["M 483 807 Q 508 789 534 767 Q 547 757 561 759 Q 570 760 573 772 Q 576 785 566 810 Q 559 826 532 837 Q 504 844 475 848 Q 462 849 456 847 Q 452 843 454 832 Q 458 822 483 807 Z","M 231 699 Q 212 698 226 683 Q 238 670 253 666 Q 271 662 285 665 Q 373 689 473 702 Q 579 715 755 715 Q 780 714 801 715 Q 817 715 822 722 Q 826 732 813 744 Q 789 762 770 769 Q 754 773 736 770 Q 654 754 509 734 Q 382 716 231 699 Z","M 281 558 Q 300 573 311 583 Q 323 593 334 603 Q 344 613 358 622 Q 371 629 363 640 Q 353 649 336 656 Q 320 663 313 660 Q 306 659 309 650 Q 313 640 305 627 Q 298 609 289 596 Q 279 583 270 566 C 256 540 257 539 281 558 Z","M 317 347 Q 310 381 305 408 L 301 427 Q 297 452 294 472 L 292 480 L 289 502 Q 286 530 286 539 Q 286 551 281 558 L 270 566 Q 252 578 231 581 Q 221 582 214 577 Q 208 571 215 560 Q 236 532 248 500 Q 258 469 285 343 C 291 314 323 318 317 347 Z","M 292 480 Q 291 481 293 481 Q 335 493 365 501 Q 381 507 374 515 Q 364 524 346 524 Q 330 523 301 510 Q 294 506 289 502 C 265 484 267 464 292 480 Z","M 305 408 Q 306 408 311 408 Q 347 418 373 425 Q 389 431 382 439 Q 372 448 354 447 Q 338 447 309 433 L 301 427 C 277 409 276 408 305 408 Z","M 409 637 Q 402 643 393 646 Q 384 647 379 645 Q 373 641 376 635 Q 380 625 386 618 Q 390 605 392 584 Q 395 560 405 359 C 406 329 435 332 434 362 Q 431 425 430 479 L 429 500 Q 428 530 428 556 L 428 571 Q 428 578 428 583 Q 428 596 428 607 Q 428 610 429 612 C 430 622 430 622 409 637 Z","M 622 384 Q 631 505 642 586 Q 645 607 655 619 Q 664 629 656 642 Q 649 649 615 671 Q 605 678 588 672 Q 554 659 503 647 Q 461 640 409 637 C 379 635 399 610 429 612 Q 436 611 448 614 Q 539 635 577 639 Q 593 640 597 636 Q 601 629 600 613 Q 599 601 598 588 L 597 573 Q 596 542 594 512 L 594 498 Q 590 434 587 380 C 585 350 620 354 622 384 Z","M 576 567 Q 592 571 597 573 C 610 577 610 577 598 588 Q 594 594 579 597 Q 560 601 540 593 Q 518 586 492 580 Q 465 576 433 572 Q 430 572 428 571 C 402 566 402 566 428 556 Q 438 552 450 549 Q 466 546 488 550 Q 531 557 576 567 Z","M 430 479 Q 436 478 442 476 Q 455 475 475 475 L 519 483 Q 544 487 570 492 Q 591 495 594 498 C 604 503 604 503 594 512 Q 590 518 575 521 Q 556 525 536 519 Q 512 512 487 507 Q 459 503 429 500 C 399 497 401 485 430 479 Z","M 475 475 Q 479 469 481 464 Q 485 421 488 369 C 490 339 511 342 514 372 Q 518 409 524 444 Q 525 453 527 459 Q 528 463 530 467 Q 531 474 521 482 Q 520 483 519 483 C 494 499 459 500 475 475 Z","M 762 402 Q 777 481 803 564 Q 809 588 821 598 Q 834 610 828 621 Q 818 636 788 654 Q 775 664 751 656 Q 714 646 683 646 Q 673 647 671 638 Q 672 632 684 625 Q 697 615 715 620 Q 725 620 736 621 Q 745 621 748 617 Q 754 613 752 596 Q 751 574 747 547 L 745 526 Q 741 501 737 473 L 734 454 Q 730 427 724 397 C 718 368 756 373 762 402 Z","M 747 547 Q 740 551 729 554 Q 711 558 679 551 Q 666 545 654 541 Q 641 540 656 526 Q 660 523 669 523 Q 712 524 744 526 L 745 526 C 775 527 774 533 747 547 Z","M 737 473 Q 730 480 717 482 Q 699 486 667 479 Q 657 473 646 469 Q 633 468 648 454 Q 652 451 660 451 Q 702 452 732 454 L 734 454 C 758 455 758 455 737 473 Z","M 187 245 Q 200 287 211 310 C 218 325 218 325 212 338 Q 202 360 191 367 Q 175 380 173 356 Q 173 350 173 342 Q 172 323 163 310 Q 145 286 121 259 Q 111 249 114 230 Q 118 202 127 187 Q 140 162 159 187 Q 175 211 187 245 Z","M 211 310 Q 236 294 263 300 Q 345 322 431 336 Q 527 349 680 365 Q 771 374 795 369 Q 811 359 810 352 Q 811 348 806 336 Q 794 312 782 286 Q 775 273 781 269 Q 788 265 804 275 Q 856 308 898 317 Q 932 327 932 335 Q 931 345 863 397 Q 844 413 821 410 Q 793 407 762 402 L 724 397 Q 678 393 627 385 Q 624 385 622 384 L 587 380 Q 550 377 514 372 L 488 369 Q 460 366 434 362 L 405 359 Q 375 358 345 352 Q 330 351 317 347 L 285 343 Q 248 342 212 338 C 182 335 184 322 211 310 Z","M 398 274 Q 385 284 373 289 Q 363 292 356 288 Q 349 284 352 276 Q 356 266 362 258 Q 366 246 368 224 Q 369 200 378 -4 C 379 -34 414 -31 414 -1 Q 414 32 414 62 L 414 87 Q 414 118 414 147 L 414 171 Q 414 195 414 216 Q 415 229 415 240 L 415 241 C 415 262 415 262 398 274 Z","M 648 21 Q 658 136 671 212 Q 674 231 684 245 Q 696 258 685 273 Q 676 283 633 311 Q 620 321 599 312 Q 559 299 496 285 Q 450 276 398 274 C 368 273 386 235 415 241 Q 422 242 430 244 Q 541 268 586 271 Q 605 274 610 267 Q 614 260 613 244 Q 609 114 602 16 C 600 -14 645 -9 648 21 Z","M 414 147 Q 417 147 422 147 Q 504 160 563 167 Q 584 170 577 181 Q 567 194 545 198 Q 524 202 487 192 Q 448 182 414 171 C 385 162 384 147 414 147 Z","M 563 79 Q 584 82 576 93 Q 567 106 545 111 Q 524 115 488 106 Q 448 96 414 87 C 385 79 384 62 414 62 Q 417 62 422 62 Q 504 72 563 79 Z","M 473 -27 Q 588 -17 779 -27 Q 806 -28 829 -30 Q 848 -30 853 -22 Q 859 -12 843 2 Q 818 24 796 33 Q 778 40 758 37 Q 712 30 648 21 L 602 16 Q 559 13 511 8 Q 463 4 414 -1 L 378 -4 Q 296 -8 209 -15 Q 188 -16 203 -33 Q 216 -48 233 -53 Q 252 -60 269 -56 Q 365 -35 473 -27 Z"],"medians":[[[461,839],[528,809],[559,773]],[[228,691],[270,683],[520,723],[735,742],[760,743],[813,727]],[[318,652],[333,633],[280,568]],[[222,570],[259,541],[292,379],[299,359],[311,354]],[[300,488],[302,497],[313,501],[352,512],[367,510]],[[308,414],[322,427],[375,434]],[[387,637],[401,624],[409,601],[417,376],[426,369]],[[418,637],[425,629],[455,627],[599,656],[623,637],[628,629],[617,565],[607,413],[603,396],[592,387]],[[432,564],[467,561],[571,583],[590,581]],[[437,495],[447,488],[480,490],[557,507],[587,505]],[[483,472],[504,456],[501,385],[494,378]],[[679,639],[696,632],[763,635],[787,613],[749,427],[730,404]],[[663,535],[713,540],[733,539],[745,531]],[[655,463],[722,467],[733,459]],[[182,361],[192,332],[190,318],[150,243],[142,190]],[[220,331],[230,321],[245,319],[428,350],[802,388],[834,378],[854,349],[786,275]],[[363,279],[381,263],[391,233],[393,36],[395,16],[407,7]],[[406,271],[424,259],[599,292],[628,286],[649,256],[627,42],[609,22]],[[418,153],[439,165],[500,178],[548,182],[568,177]],[[418,68],[438,79],[515,93],[547,94],[568,88]],[[206,-24],[260,-34],[520,-7],[767,6],[842,-16]]]}
const metaData2 = {"character":"攮","strokes":["M 298 541 Q 313 547 331 551 Q 355 558 358 562 Q 365 571 360 578 Q 353 588 325 591 Q 312 592 300 590 L 255 573 Q 207 555 149 543 Q 116 534 141 521 Q 181 503 231 521 Q 241 525 254 528 L 298 541 Z","M 251 324 Q 250 240 249 137 Q 248 113 235 104 Q 229 100 155 113 Q 124 122 127 113 Q 128 106 148 94 Q 212 49 229 22 Q 248 -9 264 -9 Q 277 -10 290 22 Q 306 64 303 131 Q 296 246 295 362 L 295 393 Q 295 468 298 541 L 300 590 Q 300 686 319 753 Q 335 781 284 801 Q 253 819 235 812 Q 219 806 234 785 Q 253 760 254 729 Q 255 713 255 573 L 254 528 Q 253 459 252 365 L 251 324 Z","M 252 365 Q 84 259 80 255 Q 68 249 65 241 Q 64 234 77 222 Q 95 210 115 204 Q 124 203 142 218 Q 191 275 251 324 L 295 362 Q 314 381 336 396 Q 352 408 361 421 Q 365 433 357 431 Q 354 431 295 393 L 252 365 Z","M 634 763 Q 740 784 742 784 Q 749 790 745 796 Q 741 805 721 811 Q 696 817 640 798 L 584 786 Q 538 780 487 777 Q 462 774 479 762 Q 504 746 586 756 L 634 763 Z","M 486 709 Q 479 713 457 715 Q 448 716 446 713 Q 442 709 448 697 Q 464 672 476 629 Q 479 616 488 608 Q 501 592 505 604 Q 506 611 507 622 L 504 645 Q 500 673 498 686 C 495 705 495 705 486 709 Z","M 742 672 Q 754 691 771 698 Q 781 708 774 721 Q 725 763 686 743 Q 656 736 631 728 L 587 720 Q 538 714 486 709 C 456 706 468 684 498 686 Q 508 686 522 689 Q 555 695 588 699 L 629 706 Q 704 718 713 711 Q 716 707 709 680 C 702 651 725 648 742 672 Z","M 624 637 Q 673 644 747 650 Q 754 651 755 657 Q 755 661 742 672 C 730 683 730 683 709 680 Q 706 681 626 663 L 588 656 Q 543 650 504 645 C 474 641 478 628 507 622 Q 516 619 526 621 Q 550 627 589 632 L 624 637 Z","M 621 604 Q 622 620 624 637 L 626 663 Q 627 685 629 706 L 631 728 Q 632 746 634 763 L 640 798 Q 644 808 646 817 Q 649 826 633 838 Q 605 853 587 856 Q 574 857 568 852 Q 562 845 569 834 Q 584 813 584 786 L 586 756 Q 586 740 587 720 L 588 699 Q 588 678 588 656 L 589 632 Q 589 617 589 600 C 589 570 619 574 621 604 Z","M 407 573 Q 404 582 389 591 Q 386 594 382 591 Q 378 588 378 580 Q 382 556 364 508 Q 357 495 359 481 Q 362 468 369 457 Q 376 450 379 455 Q 388 458 398 494 Q 408 528 413 541 Q 417 548 417 555 L 407 573 Z","M 417 555 Q 436 543 476 550 Q 587 584 767 599 Q 786 600 795 599 Q 808 593 808 587 Q 795 554 780 521 L 781 520 Q 785 517 799 525 Q 842 550 877 556 Q 905 563 905 569 Q 905 578 850 622 Q 831 638 734 621 Q 650 611 621 604 L 589 600 Q 550 596 506 588 Q 463 581 419 576 Q 409 576 407 573 C 383 568 389 566 417 555 Z","M 463 515 Q 456 519 436 523 Q 429 526 426 522 Q 422 519 427 508 Q 440 483 448 438 Q 449 425 458 416 Q 468 401 472 411 Q 473 417 474 427 L 473 448 Q 469 482 469 495 C 469 512 469 512 463 515 Z","M 570 460 Q 579 491 590 502 Q 603 518 588 527 Q 576 534 558 544 Q 546 551 535 543 Q 510 525 463 515 C 434 509 440 490 469 495 Q 472 495 524 508 Q 537 511 541 506 Q 542 505 539 465 C 537 435 561 431 570 460 Z","M 474 427 Q 483 427 491 428 Q 518 434 577 440 Q 584 441 584 447 Q 584 451 570 460 L 539 465 Q 535 465 533 464 Q 499 454 473 448 C 444 441 444 427 474 427 Z","M 648 457 Q 649 460 649 463 L 648 485 Q 644 513 643 527 C 642 544 642 544 640 545 Q 639 546 638 547 Q 631 551 607 555 Q 600 556 598 553 Q 594 549 600 539 Q 613 517 624 478 Q 624 466 636 455 C 645 446 645 446 648 457 Z","M 744 493 Q 754 518 765 526 Q 781 542 766 552 Q 753 559 736 572 Q 723 579 711 572 Q 698 562 678 556 Q 662 552 640 545 C 611 536 613 526 643 527 Q 650 527 661 529 Q 710 539 715 535 Q 719 532 716 520 Q 713 510 710 499 C 702 470 732 465 744 493 Z","M 649 463 Q 650 463 653 462 Q 660 461 670 462 Q 695 466 751 470 Q 758 471 760 477 Q 760 483 744 493 L 710 499 Q 706 499 704 498 Q 673 489 648 485 C 618 480 620 470 649 463 Z","M 688 377 Q 704 381 723 384 Q 771 393 778 399 Q 785 405 782 411 Q 778 421 755 427 Q 722 436 700 421 L 645 407 Q 635 407 555 388 L 508 382 Q 483 381 455 379 Q 427 376 447 363 Q 471 347 512 349 L 554 356 Q 599 363 646 370 L 688 377 Z","M 680 308 Q 713 314 747 317 Q 766 318 760 330 Q 753 342 731 347 Q 713 351 684 343 L 646 337 Q 598 330 554 320 L 515 313 Q 479 309 447 302 Q 432 299 449 286 Q 461 277 518 283 L 555 289 Q 600 296 645 303 L 680 308 Z","M 555 388 Q 556 398 551 403 Q 532 419 515 425 Q 506 428 499 424 Q 493 420 496 413 Q 505 401 508 382 L 512 349 Q 513 336 515 313 L 518 283 Q 519 267 521 245 C 524 215 557 219 556 249 Q 555 270 555 289 L 554 320 Q 554 339 554 356 L 555 388 Z","M 675 267 Q 676 288 680 308 L 684 343 Q 685 362 688 377 L 700 421 Q 703 428 690 439 Q 669 451 648 457 L 636 455 Q 635 456 634 454 Q 628 450 634 439 Q 643 424 645 407 L 646 370 Q 646 354 646 337 L 645 303 Q 644 284 644 262 C 644 232 673 237 675 267 Z","M 618 228 Q 688 235 858 236 Q 874 237 878 243 Q 882 253 869 264 Q 821 300 768 283 Q 728 277 675 267 L 644 262 Q 610 261 556 249 L 521 245 Q 446 238 366 226 Q 350 225 362 210 Q 372 200 388 195 Q 404 191 418 194 Q 460 206 505 212 L 541 219 Q 557 222 575 223 L 618 228 Z","M 505 212 Q 475 140 324 41 Q 308 31 328 32 Q 379 32 496 128 L 526 156 Q 565 195 565 200 Q 564 210 544 218 Q 543 219 541 219 C 513 230 513 230 505 212 Z","M 496 128 Q 514 55 482 12 Q 461 -22 496 -58 Q 499 -61 502 -63 Q 511 -70 522 -54 Q 546 -23 629 56 Q 645 69 646 75 Q 647 85 630 77 Q 549 38 543 39 Q 536 43 537 60 Q 541 108 545 120 Q 549 136 538 146 Q 531 153 526 156 C 502 174 489 157 496 128 Z","M 726 122 Q 745 129 759 136 Q 810 160 824 163 Q 840 167 836 181 Q 829 194 812 209 Q 797 222 788 221 Q 778 222 779 212 Q 779 196 739 159 Q 726 149 711 135 C 689 115 698 111 726 122 Z","M 711 135 Q 669 174 618 228 C 597 250 549 238 575 223 Q 602 210 620 183 Q 774 -16 806 -23 Q 855 -23 917 -7 Q 930 -4 934 2 Q 937 6 929 10 Q 802 56 730 119 Q 727 120 726 122 L 711 135 Z"],"medians":[[[143,533],[203,534],[302,567],[350,571]],[[241,798],[266,783],[285,755],[273,437],[276,121],[269,89],[252,63],[133,111]],[[75,240],[116,239],[224,329],[357,425]],[[481,770],[506,765],[574,768],[697,794],[740,791]],[[453,708],[478,683],[497,608]],[[494,706],[514,699],[708,731],[728,726],[741,712],[734,695],[717,689]],[[511,640],[519,633],[530,634],[708,663],[748,657]],[[576,845],[612,812],[607,633],[594,606]],[[386,584],[397,552],[383,512],[376,465]],[[414,571],[437,563],[465,564],[659,600],[738,607],[747,613],[818,610],[833,600],[843,583],[784,524]],[[432,515],[449,502],[466,415]],[[470,501],[477,508],[547,526],[566,511],[558,481],[564,472]],[[478,432],[486,439],[528,449],[578,446]],[[604,547],[625,529],[641,461]],[[647,532],[663,541],[724,554],[740,538],[733,513],[717,503]],[[653,469],[700,482],[753,477]],[[448,372],[516,366],[723,407],[770,408]],[[448,294],[506,295],[711,331],[751,326]],[[505,416],[523,401],[532,383],[538,269],[526,252]],[[639,447],[671,418],[660,281],[651,269]],[[364,218],[398,211],[614,244],[793,262],[839,258],[870,248]],[[557,201],[523,189],[460,120],[415,85],[332,39]],[[527,145],[518,35],[524,6],[548,13],[615,55],[619,67],[631,66],[639,74]],[[824,176],[798,184],[739,141],[719,136]],[[582,221],[612,214],[720,94],[807,21],[848,10],[927,3]]]}
const svg = generationSVG(metaData2)
fs.writeFile('test.svg', svg, () => console.log('done'))